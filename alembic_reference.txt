Alembic is a DATABASE MIGRATION tool.

Developers can track changes to code and rollback code easily with git. Why can't we do the same for database models/tables.
Database migrations allow us to incrementally track changes to database schema and rollback changes to any point in time.
Alembic can also automatically pull database models from sqlalchemy and generate the proper tables
(unlike how we had to delete the whole table for sqlalchemy to read the changes)

> pip install alembic
> python -m alembic init alembic [folder-name]

Go to env.py in alembic folder and add > from app.models import Base
(we import Base from models and not database is because we want it to have access to the tables as well)
(for letting it access the database)
Also change the target_metadata from None to >target_metadata = Base.metadata

Next go to alembic.ini and replace "sqlalchemy.url = driver://user:pass@localhost/dbname" with:
>sqlalchemy.url = postgresql+psycopg2://postgress:080509@localhost:5432/fastapi

BUT DO NOT HARDCODE:
DO THIS INSTEAD:
1. Go to env.py and add >from app.config import settings
2. config.set_main_option("sqlalchemy.url","postgresql+psycopg2://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}")
(below >config = context.config)
3. leave sqlalchemy.url blank in alembic.ini (it will get overriden)
>sqlalchemy.url = 


in cmd: >alembic --help (gives commands you can run using alembic)
>python -m alembic revision -m "Description of the changes"
(used to create a new migration script. You can provide a message describing the revision and use the --autogenerate flag to let Alembic automatically detect changes in your models )
(it creates a versions folder with commit changes and you can update the migrations script)

Documentation for migration tools and commands: https://alembic.sqlalchemy.org/en/latest/api/ddl.html

>python -m alembic upgrade 3a9d9d455906 (Revision ID number)
The command also creates an alembic_version table in the database.
Do not delete this as this is the one which does the version controlling and tracking for rollback.

>python -m alembic current (This command shows the current revision applied to the database)
>python -m alembic heads (This command shows the most recent revision(s) available)
>python -m alembic history (This command lists all revisions in the history)
>python -m alembic upgrade head (This command upgrades the database to the latest revision)

You can obviously just pass in the revision ID instead 

>python -m alembic downgrade <revision_id> (for undoing a change)
>python -m alembic downgrade -1 (back to one revision earlier. You can give any number)
>python -m alembic upgrade +1 (+1 from current one, check using alembic current)

Note that if i rollback to -2, it means that it removes -1 as well. 
So it just follows a timeline and if you specify a point in time, you don't have the intermediate ones as well.
Hence, always review the generated downgrade scripts after running the command in cmd to ensure they perform the desired operations.


Now, alembic is smart enough to access out models defined (using the metadata we changed to Base) and autogenerate missing pieces. Here's how to do it:
>python -m alembic revision --autogenerate -m "auto-vote"
>python -m alembic upgrade head

So the best part about autogenerate is that no matter what state your code is in, using autogenerate you can easily make those updates by simply updating models.py
You don't even have to add the migration scripts!


Also, running a migration upgrade twice by mistake will not cause any issues or duplicate changes in your database schema.






